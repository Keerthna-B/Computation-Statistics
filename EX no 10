import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

# Create synthesized data of size 200
np.random.seed(0)
data = np.random.rand(200, 2)

# Original Data Plot
plt.scatter(data[:, 0], data[:, 1])
plt.title("Original Data Plot")
plt.xlabel("Feature 1")
plt.ylabel("Feature 2")
plt.show()

# Standardize the features
scaler = StandardScaler()
data_std = scaler.fit_transform(data)

# Standardized Data plot
plt.scatter(data_std[:, 0], data_std[:, 1])
plt.title("Standardized Data plot")
plt.xlabel("Feature 1")
plt.ylabel("Feature 2")
plt.show()

# Apply K-Means clustering with n=3
kmeans = KMeans(n_clusters=3)
kmeans.fit(data_std)

# Plot the clusters with their centre points
plt.scatter(data_std[:, 0], data_std[:, 1], c=kmeans.labels_)
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='red', marker='X')
plt.title("K-Means Clustering with n=3")
plt.xlabel("Feature 1")
plt.ylabel("Feature 2")
plt.show()

# Find the value of K for the selected data set using Elbow method
inertia = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i)
    kmeans.fit(data_std)
    inertia.append(kmeans.inertia_)

plt.plot(range(1, 11), inertia)
plt.title("Elbow Graph for identifying the number of clusters")
plt.xlabel("Number of Clusters")
plt.ylabel("Inertia")
plt.show()

# Apply K-Means clustering with the recommended Elbow value as k
k_recommended = 3
kmeans = KMeans(n_clusters=k_recommended)
kmeans.fit(data_std)

# Plot the clusters with their centre points
plt.scatter(data_std[:, 0], data_std[:, 1], c=kmeans.labels_)
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='red', marker='X')
plt.title("K-Means Clustering with k={}".format(k_recommended))
plt.xlabel("Feature 1")
plt.ylabel("Feature 2")
plt.show()
